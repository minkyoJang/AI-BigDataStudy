1. 넌파이 사용하는 이유 2가지
- 속도가 빠르다
- 편하고 쉽다.(엘리먼트와이즈 방식. + - X 수학 그대로 쓸 수 있음) (scipy_과학분야에서 많이 쓰는 stats,signal등 미리 계산해둔거 쓰면됨. 굳이 구현 안하게 해둠)

2. 넌파이에서 속도가 빠른 이유
- C로 만들었다
- 벡터라이즈된 데이터 구조/알고리즘으로 만들어졌다. 
	- 벡터라이즈: 연산을 for 없이 한다.
- 호모지니어스
- 내부구조가 일련이다.(strides)(실제로는 1열인데, 사람에게는 n*n행으로 보이게해)

3. 어레이는 포문을 돌린다 안돌린다? 안돌린다 속도느려진다.

4. 루프 안 쓰는 3가지 //이제-제가-컴맵
- 이터레이터, 제네리이터
- 컴프리핸션
- 재귀함수
- 맵 필터 리듀스 하이 아더

5. 넌파이는 로우?하이 레벨?
- 로우 레벨

6. dir과 __dir의 차이?
- 정렬의 문제
- 대문자 A은 65, 소문자a는 87. 따라서 dir했을때 대문자부터 등장

7. 파이썬은 상수 있음?
- 명시적 상수 없고, 대문자로 이으면 관례처럼 상수처럼 씀

8. 데이터 생성 방식 3가지
- 인스턴스 방식) 순수한 객체라서
- 리터럴 방식) float=0.0, str=""이렇게 명시적으로
- 팩토리 메소드) 인스턴스 하지 않고 다른 함수 힘을 빌어서 인스턴스화
	- 예)호모지니어스한 어레이에서 a=np.array(['1',2,3]) 후 a치면 전부 타입이 문자열

9.아웃풋에서 뭐라고 나오면 넌파이임?
- array()

10. array는 어떤 타입?
- 호모지니어스함.

11. 어레이는 뮤터블 /이뮤터블?
- 뮤터블. 따라서 카피(스왈로/딥 카피) 알아야함
- 이는 튜플을 입력헀는데 리스트로 출력되는걸 통해 알 수 있음 !!!@@@@

12. 3차원 만드는 경우 공백은?
- 그 사이에 겹치는게 있나보다
- 

13. 어레이는 로우레벨? 하이레벨?
- 로우레벨. 얘는 C방식 포트란 방식, 리틀앤디언, 빅 앤디언 방식으로 지원
- < 는 리틀 앤디언, >는 빅앤디언

14. 타입 쳤을때 numpy, ndarray 나왔으면 만들 수 있나?
- 클래스. 클래스는 인스턴스 하면 된다.
>> n=np.ndarray(0)
>> n 치면 결과로 array([], dtype=float64)

15. 호모지니어스라면서 왜 dtype이 나올까?
- 팩토리 메소드와 연계됨

@@a=np.array(['1',2,3])(클래스처럼) 이거는 Type Error나는데 ,  a=np.array(['1',2,3]) 하면 아무 문제 없던건 왜?

16. 행 열 바꾸게 하려면?
> a.T

17. 엘리먼트 와이즈?
- 수학적 연산 편리하게 쓰게 하려고. (더하기, 뺴기 등)

18.차원을 아는 방법?
- ndim : 차원
- len : 차원
- shape :몇행 몇열. 연산할때 모양 맞추는게 중요해서 얘도 중요해
- flags: 씨인지 포트란인지
    - 씨는 옆으로, 포트란은 아래로
- size:원소의 갯수
- itemsize: 하나가 몇 비트인가
- dtype

19.파이썬 언더바★★★★★
- 1. 앞에 언더바 하나)관례상 프라이빗. 
    - 그러나 관례상이 아니었던 곳이 있었어 from * 쓰는 경우 임포트 된다/안된다?  안된다.
    - 앞에 한개 붙으면 '프라이빗'으로 쓰인다. from import * 하면 안됨
- 2. 앞에 두개 붙을때 __) OOP할때 dir 할때 안 나왔어. 
    - 맹글링.(dir했더니 안나옴)
- 3. 앞에 둘 뒤에 둘) 매직메소드/스페셜 메소드
- 4. _
    - 관례상 필요없는 변수 이름 일때
- 5. _
    - 언더바가 마지막을 가리킬떄
- 6. 
    - 언더바 한개 붙고 이름을 _(a)로 표현하는경우
    - 다국어 처리하는 경우
- 7. 
    - 이름 뒤에 언더바 붙은 경우
    - 파이썬 키워드하고 똑같을때 이름 충돌을 피하려고 사용

20. 액시스
- 행끼리 계싼? 0
- 열끼리 계싼? 1
- 꼼수로 shape 10*3인 행렬에 대해서 
    - 액시스0은? 0자리의 10을 가린다. 그럼 몇개? 3개. 
    - 액시스 1은? 1자리의 3을 가린다. 그럼 몇개? 10개. 


21. 어디부터 어디까지 range 유사ㅣ한거 있음
- a=np.arange(10)
22. reshape 행렬 모양 ㅂ녀경

22. b=np.ones((3,3)), c=np.full((3,2),6), d=np.ones_like(a)

23. like
- 내가 지정한 애랑 동일항 행/열로 만들어줘요
- 행렬 연산할때 크기가 중요해요. shape이 똑같아야해.
- 이거 사용하면 크기 맞춰서 뭘 해준대
- 대신 값은 1로 다 채워주고

24. 단위행렬
- eye, identity 
- 차이 : eye에 옵션이 많음. 

25. 라인별로 자르고 싶을때
- d=np.linspace(0,100)

26. 로그로 잘라
- e=np.logspace(1,100)

27. 쓰레기값으로 채워서 만드는거
- e=np.empty((4,2))

28. 뽑아내기
-1. 인덱싱/슬라이상 + 2.키
-2. ... 전부다 뽑아내기
-3. 뒤에 조건을 넣을 수 있어요. 
 a[(a>3) | (a<8)] #d이건 OR
 a[(a>3) & (a<8)] #이건 가능 and
>> 다만 괄호 안쓰면 에러

29. 마스킹 기법
- 트루만 뽑기** 할당하는 방식 아니고 저렇게 작성해야함
- a=np.arange(10)
- a[[True, False, True,True,True,True,True,True,True,True]] 
	- array([0, 2, 3, 4, 5, 6, 7, 8, 9])

30. 팬시 인덱싱
- 마스킹과 유사. 꺽쇄가 두개. 
- a[[1,2]] 1행,2행 뽑아옴

31.  추가 5가지 넘파이 지원하는 것
- 콤마 땡떙떙 조건 마스크 팬시 인덱싱

32.괄호 두개!
- 팬시 인덱싱) 행만 뽑아요
- a[[1,2,4],[2,3,4]]는 (1,2),(2,3),(4,4)에 있는거 뽑는거

33. 브로드 캐스팅
-간단한 크기는 넌파이가 알아서 맞춰줌
-3+np.arange(10)


34. 파이썬 넌파이 쉬운 이유
1. 인덱싱,슬라이싱
2. 브로드 캐스트
3. ufunc

35. ufunc?
- u: universial 보편적인
- 넌파이에서 원소 한개 짜리 스칼라에ㅐ서도 지원이 되고, 벡터에도 지원이 됨. 
	- 예) np.abs([-1,1,2]), np.ceil([2.9,1,2,3,0.3])

36. 넌파이 설명 보는법
- np.info(np.ceil)
-1)np.info()
	- /짝대기는 포지셔널 온리, *별표는 키워드. 키워드 이후부터는 키워드만 써야함
- 2)iinfo()
	- np.iinfo(3)
	- 인티저 타입에 대한 인포메이션 알려줌
	- 유니버셜은 이거로 봐야해. 설명에 안나와

37. 간단한 함수말고 좀 어려운 함수는 고급 함수는?
- 싸이 파이
- 팩토리얼도 가능
- from scipy.special import factorial
- factorial([3,4,5])

38. np.where(아주중요)
- b=np.arange(5,10) 
- b[np.where(b>5)] #얘는 값이 나오니까 6,7,8,9
	-array([6, 7, 8, 9])
-b
	-array([5, 6, 7, 8, 9])
- np.where(b>5)
	-(array([1, 2, 3, 4], dtype=int64),)
	-#np.where는 인덱스를 가져오니까 해당되는 인덱스는 1,2,3,4에 대한 거(인덱스0인건 5라 충족X)

39. np.max
- 가장 큰 값

40. 인덱스 중에서 가장 큰거/ 가장 작은거
-np.argmax(), np.argmin()

41. np.argmin과 b.argmin차이
- 앞에게 함수로, 뒤에게 메소드
- 이 차이는 SHIFT TAB보면 알 수 있어요

42. 떙떙떙
- 1.줄임표
- 2. 인덱스 슬라이싱에서 모두다 표현

43. 아주 길때 몇개 볼지 고르는거
- np.set_printoptions(threshold=np.non)
- np.nan 되게 골치아파
    - 우리 이거 float 에서 본적 있죠
    - float과 무한대 형태로 있는데 np.nan. 아까 파이는 같았으나 이건 또 달라요. 이런건 외울수 밖에 없어★

44. np.newaxis
-이런건 외워야한다
- np.newaxis==None //True
- np.newaxis is None //True

45. setprintoption
- 여러개중 몇개 볼건지

46.  파이썬에서 검생이 안되는데 넌파이때문에 만든 연산자. 
- @
- 이 연산자는 유일하게 넌파이만 사용 가능. 파이썬 3.6 이상


47. 다섯개 새로운거~
인덱싱 슬라이싱
콤마. /앞은 행 뒤는 열
떙떙떙
마스킹
조건

48. 카피
-  파이썬은 카피copy()하면 스왈로인데, 넌파이는 딥카피야. 
-c=b.copy() <넌파이는 다 중첩해,  카피가 디카피야.>
- 파이썬하고 반대야.

49. 그럼 넌파이에서 스왈로 카피는?
- view
- c=b.view()